const { fifaData } = require("./fifa.js");

/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
const wCresult_2014 = fifaData.filter(wC2014);
function wC2014(item) {
  return item.Year === 2014;
}
console.log(wCresult_2014);
const fHtN_2014 = (arr) => {
  let hTn = "";
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].Stage === "Final") {
      hTn = arr[i]["Home Team Name"];
    }
  }
  return hTn;
};
console.log(fHtN_2014(wCresult_2014));

//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)

const fAtN_2014 = (arr) => {
  let aTn = "";
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].Stage === "Final") {
      aTn = arr[i]["Away Team Name"];
    }
  }
  return aTn;
};
console.log(fAtN_2014(wCresult_2014));

//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)
const fHtG_2014 = (arr) => {
  let hTg = "";
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].Stage === "Final") {
      hTg = arr[i]["Home Team Goals"];
    }
  }
  return hTg;
};
console.log(fHtG_2014(wCresult_2014));

//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
const fAtG_2014 = (arr) => {
  let aTg = "";
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].Stage === "Final") {
      aTg = arr[i]["Away Team Goals"];
    }
  }
  return aTg;
};
console.log(fAtG_2014(wCresult_2014));

//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/

const fWinner_2014 = (arr) => {
  let winner = "";
  for (let i = 0; i < arr.length; i++) {
    if (
      arr[i].Stage === "Final" &&
      arr[i]["Home Team Goals"] > arr[i]["Away Team Goals"]
    ) {
      winner = arr[i]["Home Team Name"];
    } else if (
      arr[i].Stage === "Final" &&
      arr[i]["Home Team Goals"] < arr[i]["Away Team Goals"]
    ) {
      winner = arr[i]["Away Team Name"];
    } else if (
      arr[i].Stage === "Final" &&
      arr[i]["Home Team Goals"] == arr[i]["Away Team Goals"]
    ) {
      winner = arr[i]["Win conditions"];
    }
  }
  return winner;
};
console.log(fWinner_2014(wCresult_2014));

/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(arr) {
  let finals = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].Stage === "Final") {
      finals.push(arr[i]);
    }
  }

  return finals;
  /* kodlar buraya */
}

/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(arr, Finaller) {
  const years = [];
  let finals = Finaller(arr);
  for (let i = 0; i < finals.length; i++) {
    years.push(finals[i].Year);
  }
  console.log(years);
  return years;
}
console.log(Yillar(fifaData, Finaller));

/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */

function Kazananlar(/* kodlar buraya */) {
  /* kodlar buraya */
}

/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(/* kodlar buraya */) {
  /* kodlar buraya */
}

/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(/* kodlar buraya */) {
  /* kodlar buraya */
}

/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(/* kodlar buraya */) {
  /* kodlar buraya */
}

/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(/* kodlar buraya */) {
  /* kodlar buraya */
}

/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(/* kodlar buraya */) {
  /* kodlar buraya */
}

/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */

/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
  console.log("Kodlar Ã§alÄ±ÅŸÄ±yor");
  return "as";
}
sa();
module.exports = {
  sa,
  Finaller,
  Yillar,
  Kazananlar,
  YillaraGoreKazananlar,
  OrtalamaGolSayisi,
};
